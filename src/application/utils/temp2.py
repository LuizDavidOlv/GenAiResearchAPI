
class Temp2:
    def get_source_str():
        source_str = """
            Sources:\n\nSource Real-World Applications of Strings - blog.heycoach.in:\n===\nURL: https://blog.heycoach.in/real-world-applications-of-strings/\n===\nMost relevant content from source: 8. Mobile and Web Applications. Strings serve as a cornerstone in application development, facilitating user interactions and data management. Input validation for forms uses strings to verify user entries and prevent errors. Localization and internationalization processes involve string adaptations for different languages.\n===\nFull source content limited to 5000 tokens: Real-World Applications Of Strings\nSkip to content\n\nExplore Insights, Tips and Articles with HeyCoach Blogs\n\nHome\nDSA\nLeetcode\nAi-Ml\nSD\nPre-reads\n\nReal-World Applications of Strings\nReal-World Applications of Strings\nStrings are an essential data type in programming and play a crucial role in various real-world applications across different fields. Let’s dive into the specific use cases that highlight the power and flexibility of string manipulation!\n1. Text Processing and Manipulation\nString processing is fundamental in many applications that involve handling user input, transforming text, and analyzing content. Here are some scenarios:\n\nSearch and replace functionality in text editors to enable users to modify documents efficiently.\nSpell checking algorithms in word processors that utilize strings to scan and validate text.\nApplication of regular expressions for pattern matching and data validation in strings.\nText aggregation in blogs and content management systems to compile user-generated content.\nURL encoding and decoding to ensure safe transmission of data over the internet.\n\n| Use Case | Description |\n| --- | --- |\n| Form Validation | Ensuring that user input meets specific formats (e.g., email addresses). |\n| Data Parsing | Extracting meaningful information from unstructured text. |\n\n2. Data Serialization and Deserialization\nStrings are a key component in data interchange formats. Understanding serialization and deserialization helps maintain data integrity in communications.\n\nJSON (JavaScript Object Notation) utilizes strings to represent data structures, making it perfect for APIs.\nXML (eXtensible Markup Language) uses strings to encode document structures for data interchange.\nBinary serialization for compact data representation requires careful string manipulation.\nConfiguration files often use strings for easy human readability and editing.\nString representation of objects assists in debugging and logging.\n\n| Format | Description |\n| --- | --- |\n| JSON | Lightweight data-interchange format easily readable by humans. |\n| XML | Markup language that defines a set of rules for encoding documents. |\n\n3. Communication Protocols\nStrings are heavily involved in network communication, as they form the backbone of various protocols. Let’s explore how that works:\n\nHTTP requests and responses are composed of strings detailing client-server communication.\nChat applications use strings to transmit messages between users over the Internet.\nWebSocket protocol relies on strings for real-time, two-way interactions in applications.\nEmail protocols (SMTP, IMAP) use string formats to facilitate message sending and retrieval.\nWeb APIs often expect request and response data to be in string formats like JSON.\n\n| Protocol | Usage |\n| --- | --- |\n| HTTP | Defines rules for data exchange on the web. |\n| SMTP | Sends emails from client to server. |\n\n4. Data Security\nStrings play a significant role in data security through encryption and hashing techniques. Here’s how they contribute:\n\nHashing functions convert strings into fixed-size strings, aiding in password storage.\nEncryption algorithms use strings to secure sensitive information during transmission.\nString comparison helps detect unauthorized changes in data.\nEncoding sensitive string data can protect it from interception during communications.\nToken generation in APIs often involves secure string operations to ensure uniqueness and security.\n\n| Security Mechanism | Description |\n| --- | --- |\n| Hashing | Transforms input strings into fixed-length output. |\n| Encryption | Converts data into a format that can only be read by authorized users. |\n\n5. Natural Language Processing (NLP)\nStrings are at the heart of a myriad of NLP applications that allow computers to understand, interpret, and generate human language. Here’s how this works:\n\nText classification models use strings to categorize news articles, emails, and more.\nChatbots rely on string analysis to comprehend user queries and provide responses.\nSentiment analysis uses strings to determine the emotional tone of a piece of text.\nMachine translation converts source strings into target strings across multiple languages.\nNamed entity recognition identifies proper names and classifies them into predefined categories.\n\n| NLP Task | Description |\n| --- | --- |\n| Text Classification | Assigning predefined labels to text. |\n| Sentiment Analysis | Determining the emotional tone of the text. |\n\n6. Search Engines\nStrings are fundamental to how search engines operate, allowing efficient retrieval of information from vast data stores.\n\nIndexing involves parsing documents and storing string representations for faster search.\nSearch queries are processed as strings, allowing the engine to return relevant results.\nRanking algorithms use string similarity and keyword weighting to determine the relevance of content.\nAutocomplete features rely on string analysis to predict user intentions based on input.\nWeb scraping tools utilize strings to extract data from HTML content for indexing.\n\n| Functionality | Description |\n| --- | --- |\n| Indexing | Organizing data for efficient retrieval. |\n| Ranking | Determining the importance of results based on user queries. |\n\n7. Social Media Analytics\nStrings are widely used in social media applications to gather insights and facilitate interactions.\n\nUser post analysis involves examining strings for trending topics and sentiments.\nString formatting is crucial for displaying user-generated content in an appealing way.\nHashtags are essential strings that categorize content and enhance discoverability.\nCharacter limits and string handling are key in platforms like Twitter for concise communication.\nSocial sharing buttons utilize string URLs for easy sharing of content across platforms.\n\n| Function | Description |\n| --- | --- |\n| Trend Analysis | Identifying popular topics based on user posts. |\n| Sentiment Analysis | Evaluating the emotions conveyed in social media posts. |\n\n8. Mobile and Web Applications\nStrings serve as a cornerstone in application development, facilitating user interactions and data management.\n\nInput validation for forms uses strings to verify user entries and prevent errors.\nLocalization and internationalization processes involve string adaptations for different languages.\nUser notifications, alerts, and messages rely on clear string formatting for effective communication.\nPersisting user preferences often involves storing string values in databases.\nDynamic content rendering utilizes strings to display personalized experiences to users.\n\n| Application Feature | Description |\n| --- | --- |\n| User Preferences | Storing settings like theme and language preferences. |\n| Form Validation | Ensuring user input adheres to expectations. |\n\n9. E-commerce Platforms\nIn the realm of e-commerce, strings have a vital role in facilitating transactions and enhancing user experience.\n\nProduct descriptions use strings to inform customers about features and specifications.\nString manipulation is essential for dynamic URL construction in product listings.\nOrder processing systems rely on strings to represent order IDs and customer information.\nSearch functionality on e-commerce sites involves string searching and filtering.\nCustomer service chatbots utilize strings for automated responses and inquiries.\n\n| Task | Description |\n| --- | --- |\n| Product Search | Finding items based on user-input strings. |\n| Order Tracking | Utilizing strings to fetch order details. |\n\n10. Machine Learning\nStrings are utilized extensively in machine learning, especially when processing raw data for analysis and training models.\n\nText data preprocessing converts raw strings into clean, usable formats for machine learning algorithms.\nFeature extraction uses strings to identify relevant attributes from text data.\nTokenization splits strings into manageable pieces for further analysis.\nString embeddings convert words into numerical representations for model training.\nNatural language generation explores the creation of coherent strings as output.\n\n| ML Task | Description |\n| --- | --- |\n| Text Preprocessing | Cleaning and preparing text data for analysis. |\n| Feature Engineering | Creating new features based on string data. |\n\n11. Online Gaming and Virtual Environments\nStrings enhance the immersive experience in online gaming and virtual environments through effective data representation.\n\nPlayer usernames and profiles are managed as strings to encourage personalization.\nIn-game chat relies on strings for real-time communication between players.\nConfiguration files utilize strings to store game settings and user preferences.\nStrings are essential for displaying in-game notifications and alerts to users.\nUser feedback on games often involves string entries that help developers improve experiences.\n\n| Feature | Description |\n| --- | --- |\n| User Profiles | Personalized profiles for players based on strings.\\ |\n| In-Game Chat | Facilitating communication among players. |\n\n12. Scientific Research\nIn the realm of scientific research, strings play a significant role in representing and managing data.\n\nData sets often include string variables for categorical data representation.\nResearch publications rely on strings to handle citations and references accurately.\nString manipulation aids in formatting research findings and results for publication.\nUser submissions in research focus areas often consist of abstract strings for categorization.\nData analysis tools use strings to filter and manage variables in studies effectively.\n\n| Research Area | Use of Strings |\n| --- | --- |\n| Clinical Trials | Ensuring data integrity through string handling. |\n| Data Analytics | Extracting insights from textual data. |\n\n13. Internet of Things (IoT)\nIn the IoT ecosystem, strings are vital for the communication and management of devices.\n\nDevice IDs and statuses are often stored and transmitted as strings to facilitate identification.\nString data formats (like JSON) are utilized for device message formats.\nRemote device configuration requires effective string manipulation for setup commands.\nData streaming in IoT utilizes strings to convey sensor readings back to servers.\nAlerts and notifications generated by IoT devices commonly use strings for user communication.\n\n| Use Case | Description |\n| --- | --- |\n| Device Communication | Enabling communication between devices using string protocols. |\n| Data Reporting | Sending data back for analysis in string formats. |\n\n14. Financial Services\nStrings have extensive use in the financial sector for data representation, transactions, and communication.\n\nTransaction IDs are generated and processed as strings in banking applications.\nFinancial reports often contain string data for companies and stocks.\nAPI integrations with payment processors rely on strings for secure verification.\nString operations are essential for parsing and validating sensitive financial data.\nUser-generated strings (like reviews) play a role in assessing services and products.\n\n| Application | Functionality |\n| --- | --- |\n| Online Banking | Facilitating transactions using strings. |\n| Investment Apps | Displaying stock prices and news. |\n\n15. Education Technology\nEducational applications leverage strings for content delivery and student interaction.\n\nLearning management systems (LMS) utilize strings for course descriptions and content.\nString manipulation in quizzes and exams facilitates automatic grading.\nDiscussion forums in educational platforms rely on strings for user contributions and responses.\nCourse materials are often formatted as strings for easy access  \n\nBy rajNovember 4, 2024DSALeave a Comment on Real-World Applications of Strings\nPost navigation\nTheoretical Aspects of Strings in Computer Science\nUnderstanding the Trie Data Structure\nLeave a Reply Cancel reply\nYour email address will not be published. Required fields are marked *\nComment *\nName *\nEmail *\nWebsite\nSave my name, email, and website in this browser for the next time I comment.\nHeyCoach © All rights reserved. Theme Elastic Blog by Creativ Themes\n\nSource Strings in Action: Real-World Tales of Text Manipulation:\n===\nURL: https://medium.com/@mohsin.shaikh324/strings-in-action-real-world-tales-of-text-manipulation-d3147466af14\n===\nMost relevant content from source: Strings in Action: Real-World Tales of Text Manipulation | by Mohsin Shaikh | Medium Strings in Action: Real-World Tales of Text Manipulation Strings, the unsung heroes of programming, play a pivotal role in various real-world applications. Real-World Applications of Strings 1. Text Processing: The Foundation of Information Analysis Strings form the backbone of text processing tasks, enabling us to extract, manipulate, and analyze textual information. Why Use Strings for Text Processing: Strings are fundamental for natural language processing, sentiment analysis, and information extraction. Avoid overusing string operations if more sophisticated natural language processing libraries are available for complex tasks. Reading and writing to files involve string manipulation, as text data is often stored and retrieved using…\n===\nFull source content limited to 5000 tokens: Strings in Action: Real-World Tales of Text Manipulation | by Mohsin Shaikh | Medium\nOpen in app\nSign up\nSign in\n\nWrite\n\nSign up\nSign in\n\nMastodon\nMember-only story\nStrings in Action: Real-World Tales of Text Manipulation\n\nMohsin Shaikh\n·Follow\n3 min read\n·\nJan 20, 2024\n\n--\n\nShare\nStrings, the unsung heroes of programming, play a pivotal role in various real-world applications. In this short blog, we’ll explore how strings come to life in practical scenarios, understanding their significance, and when to wield them for maximum impact.\n\nReal-World Applications of Strings\n1. Text Processing: The Foundation of Information Analysis\nStrings form the backbone of text processing tasks, enabling us to extract, manipulate, and analyze textual information.\nExample: Keyword Extraction\n\nWhy Use Strings for Text Processing:\n\nStrings are fundamental for natural language processing, sentiment analysis, and information extraction.\n\nWhen Not to Use:\n\nAvoid overusing string operations if more sophisticated natural language processing libraries are available for complex tasks.\n\n2. File Handling: Strings as File Narrators\nReading and writing to files involve string manipulation, as text data is often stored and retrieved using…\n\n--\n\n--\n\n\nFollow\n\nWritten by Mohsin Shaikh ------------------------\n84 Followers\nA Data Scientist who reads data to bring valuable insights and bring Business from them.\nFollow\n\nHelp\nStatus\nAbout\nCareers\nPress\nBlog\nPrivacy\nTerms\nText to speech\nTeams\n\nSource Exploring Natural Language Processing Applications - Coursera:\n===\nURL: https://www.coursera.org/articles/natural-language-processing-applications\n===\nMost relevant content from source: Exploring Natural Language Processing Applications | Coursera Prominent applications for NLP technology include voice-activated assistants, machine translation, sentiment analysis, chatbots and virtual customer support, classification and categorization, content recommendation systems, text summarization, speech recognition, and natural language generation. This involves using NLP to generate natural language text from data, enabling applications like automated report generation, personalized content creation, and article writing. Natural Language Processing (NLP) is impacting various industries, such as health care and finance, by enhancing efficiency, improving decision-making, saving money, and helping professionals access corporate information in an entirely new way. Researchers and other innovators will continue to develop natural language processing applications as the NLP technology becomes more advanced.\n===\nFull source content limited to 5000 tokens: Exploring Natural Language Processing Applications | Coursera\n\nFor Individuals\nFor Businesses\nFor Universities\nFor Governments\n\n\nExplore\n\nOnline Degrees\nCareers\nLog In\nJoin for Free\n\n\n0\n\n\nData\nData Science\nExploring Natural Language Processing Applications\n\nExploring Natural Language Processing Applications\nWritten by Coursera Staff • Updated on Dec 5, 2024\nDiscover how natural language processing empowers transformations in how humans and machines communicate. Learn about diverse natural language processing applications and their impact.\n\nNatural language processing (NLP) stands at the junction where computer science, artificial intelligence, and linguistics meet. This intriguing technology enables machines to understand, meaningfully interpret, and respond to human language, with various benefits that result. From simplifying daily tasks to revolutionizing industries, NLP applications are increasingly integral to your digital life. Additionally, you might consider working in this sector of the economy because, according to Statista, the market value of NLP is projected to be 9.71 billion USD in 2024 and is estimated to reach 41.79 billion USD by 2030 [1].\nExplore how machines process and analyze human language and the myriad applications of NLP that are shaping the future of communication.\nUnderstanding natural language processing\nBefore looking into specific applications, it’s essential to understand that NLP bridges the gap between the digital and human worlds, allowing machines to comprehend human language.\nNatural language, or human, ordinary language, is more complicated than the constructed languages you usually use to communicate with a computer. Even a high-level language like Python uses commands that would sound out of place in human communication. For example, if you want a list of commands you can use with Git in Python, you can enter the command prompt “git help.” If you wanted to ask a coworker to help you with a project, it would be rude to say, “Project, help.” Or, at least, your coworker might look at you strangely. Using natural language, you might say, “Can you help with this project?”\nNatural language processing allows computers to understand human speech and the intricacies, nuances, tones, and subtleties that come along with it.\nKey natural language processing applications\nNLP has a wide array of applications across various sectors, such as finance, insurance, and health care. It significantly impacts how you interact with technology and how businesses process large volumes of text data. Prominent applications for NLP technology include voice-activated assistants, machine translation, sentiment analysis, chatbots and virtual customer support, classification and categorization, content recommendation systems, text summarization, speech recognition, and natural language generation.\nVoice-activated assistants\nNLP powers virtual assistants, so if you ever use Apple’s Siri, Amazon’s Alexa, and IBM’s watsonx Assistant, you’ve already experienced NLP. This technology enables them to understand and respond to voice commands. It allows you to interact with your device using natural language to perform tasks, search for information, and control smart home devices.\nMachine translation\nNLP is the driving force behind machine translation services such as Google Translate. It allows for the automatic translation of text and speech between languages, making global communication more accessible. NLP allows an online translator to understand the individual rules of grammar and language structure between two languages and effectively decode one into the other.\nSentiment analysis\nYour business can use NLP for sentiment analysis to gauge a customer’s opinion, their satisfaction, and the market’s response to your products by analyzing social media posts, customer reviews, and survey responses. This can help your company make better decisions, especially when formulating future strategies.\nChatbots and virtual customer support\nNLP enables chatbots to understand and respond to customers' questions and comments in a conversational manner. This application is widely used in customer service to provide instant assistance, book appointments, and resolve common issues.\nText classification and categorization\nNLP algorithms can automatically categorize and tag text into predefined categories, which is helpful in information management systems, email filtering (such as spam detection), and organizing large sets of text. Email filtering may be the most widely used tool. It identifies context clues to guess which emails may be spam and which require attention.\nContent recommendation systems\nPlatforms like T-Mobile, Spotify, and Disney+ use NLP-based recommendation systems to analyze user preferences and provide personalized content suggestions based on previous interactions and the content's textual data. Using sentiment analysis—also powered by natural language processing—recommendation systems can even recommend movies, music, or other media based on how users have reviewed those products.\nText summarization\nAutomatic text summarization tools use NLP to condense long documents into shorter summaries, preserving essential information. This is particularly useful if you must quickly digest large volumes of information.\nSpeech recognition\nSpeech recognition assists with converting spoken language into text in real-time, which is essential for dictation software, hands-free computing, and real-time transcription services. Everybody talks a little differently: At different speeds, in varying tones, with accents and regional dialects, and with differing pronunciations. After the speech recognition software transcribes your words, natural language processing analyzes those words, determines the meaning behind them, and then formulates an appropriate response.\nNatural language generation (NLG)\nThis involves using NLP to generate natural language text from data, enabling applications like automated report generation, personalized content creation, and article writing. NLG can also craft stories. With natural language generation, you can ask an AI language model like Amazon’s Alexa or Apple’s Siri a question as if speaking to another person. The model will respond similarly.\nThese applications demonstrate the versatility and impact of NLP in simplifying interactions, enhancing accessibility, and providing deeper insights from textual data across diverse domains.\nNLP applications across industries\nNatural Language Processing (NLP) is impacting various industries, such as health care and finance, by enhancing efficiency, improving decision-making, saving money, and helping professionals access corporate information in an entirely new way. NLP is transforming key sectors like retail, e-commerce, and education.\nNLP applications in health care\nIn health care, three ways that professionals use natural language processing are for clinical documentation, diagnosis, and creating personalized treatment plans.\nClinical documentation is challenging in health care because patient information and medical history can come from various formats and sources. Natural language processing can help overcome this challenge by organizing and understanding unstructured notes and presenting that information in a format doctors, nurses, and specialists can easily interact with.\nFor example, a doctor could give the patient’s medical information to the AI model and talk with a large language model about the patient’s current symptoms. The AI could reference this information against the medical information in its library of training material and suggest potential diagnoses for the doctor to follow up on. The AI could then recommend a personalized treatment plan based on the nuances of the individual’s care needs.\nNLP applications in finance\nThe finance industry also has natural language applications. For example, if you...dy Data\n8.10.1 A Long-to-Wide Example\n8.10.2 A Wide-to-Long Example\n\n\n8.11 Exercises\n\n\n9 String Manipulation\n9.1 What is Regular Expression?\n9.2 String Basics\n9.3 Regular Expression Grammar\n9.3.1 Common String Manipulation Functions\n9.3.2 Metacharacters\n9.3.3 Anchors\n9.3.4 Character Set\n9.3.5 Alternatives\n9.3.6 Quantifiers\n9.3.7 Greedy vs. Non-greedy match\n9.3.8 Group and Back-reference\n\n\n9.4 Pattern Matching\n9.4.1 str_detect()\n9.4.2 str_subset()\n9.4.3 str_extract()\n9.4.4 str_match()\n9.4.5 str_replace()\n9.4.6 str_split()\n\n\n9.5 Advanced Pattern Matching\nLookahead Assertion\nLook-behind Assertion\n\n\n9.6 Recap\n9.7 More Practices\n9.7.1 Case 1\n9.7.2 Case 2\n9.7.3 Case 3\n\n\n9.8 Case Study: Chinese Four-Character Idioms\n9.8.1 Dictionary Entries\n9.8.2 Case Study: X來Y去\n\n\n\n\n10 Data Import\n10.1 Overview\n10.2 Importing Data\n10.3 What is a CSV file? (Self-study)\n10.3.1 Why are .CSV files used?\n10.3.2 How do I save CSV files?\n\n\n10.4 Character Encoding (Self-study)\n10.4.1 Problems with ASCII\n10.4.2 From 7-bit to Single-Byte Encoding\n10.4.3 Problems with Single-Byte Encoding\n10.4.4 From Single-Byte to Multi-Byte Encoding\n10.4.5 Problems with Multi-byte Encoding\n10.4.6 Unicode and UTF-8\n10.4.7 Suggestions\n10.4.8 Recap: Character, Code Point, and Hexadecimal Mode\n\n\n10.5 Native R Functions for I/O\n10.5.1 readLines()\n10.5.2 writeLines()\n\n\n10.6 readr Functions\n10.6.1 readr::read_csv()\n10.6.2 readr::write_csv()\n\n\n10.7 Directory Operations\n10.7.1 Working Directory\n10.7.2 Relative vs. Absolute Paths\n10.7.3 Directory Operations\n10.7.4 Loading files from a directory\n\n\n\n\n11 Iteration\n11.1 Code Duplication\n11.2 Vectorized Functions: Vector vs. List\n11.3 Iteration\n11.4 purr\n11.5 purr + dplyr\n11.6 map() with self-defined functions\n\n\n12 Data Scientist First Step\n12.1 Loading Nobel Laureates Dataset\n12.2 Workflow\n12.3 Column Names\n12.4 Missing Data (NA values)\n12.5 Data Preprocessing\n12.6 Exploratory Analysis\n12.6.1 Discipline Distribution\n12.6.2 Age Distribution\n12.6.3 Category x Age Interaction\n12.6.4 Gender Distribution\n12.6.5 Age x Gender Interaction\n12.6.6 State Distribution\n\n\n12.7 Exercises\n\n\n13 Text Analytics: A Start\n13.1 Installing quanteda\n13.2 Building a corpus from character vector\n13.3 Tokenization\n13.4 Keyword-in-Context (KWIC)\n13.5 KWIC with Regular Expressions\n13.6 Lexical Density Plot\n13.7 Collocation\n13.8 Document-Feature Matrix\n13.9 Feature Selection\n13.10 Top Features\n13.11 Wordclouds\n13.12 Keyness Analysis\n13.13 Flowchart\n13.14 Exercises\n\n\nPART 2: Python Language\n14 Python Fundamentals\n14.1 Set up Environment\n14.2 Conda Environment\n14.3 Data Type\n14.4 Data Structure\n14.5 String\n14.6 Control Structure\n14.7 Function\n14.8 List Comprehension\n14.9 Python Scripts\n14.10 Modules\n14.11 Input/Output\n\n\n15 Organizing Files\n15.1 shutil\n\n\n16 Object Orientation\n16.1 What is Object Orientation?\n16.2 Class Defition\n16.3 Types of Methods\n16.4 Class Inheritance\n16.5 Special Methods\n16.6 Property Decorator\n16.7 Checking Functions\n16.8 Name Mangling\n16.9 Reference\n\n\n17 Regular Expression\n17.1 Comparison of R and Python\n17.2 Structure of Regular Expression Usage\n17.2.1 re.search()\n17.2.2 re.findall()\n17.2.3 re.finditer()\n\n\n17.3 Special Falgs/Settings for Regular Expressions\n17.4 Regular Expression in Python\n17.4.1 Raw String Notation\n17.4.2 Find all matches\n17.4.3 group() vs. groups()\n17.4.4 string format validation\n17.4.5 re.match() vs. re.search()\n17.4.6 re.split()\n\n\n17.5 Text Munging\n17.6 References\n\n\n18 Pandas\n18.1 Libraries\n18.2 Importing/Exporting Data\n18.3 Inspecting Data Frame\n18.4 Basic Functions\n18.5 Subsetting Data Frame\n18.6 Exploration\n18.6.1 NA Values\n18.6.2 Converting Data Types\n18.6.3 Pandas-supported Data Types\n18.6.4 Transformation\n18.6.5 filter()\n18.6.6 arrange()\n18.6.7 select()\n18.6.8 mutate()\n18.6.9 apply(), mutate_if()\n18.6.10 group_by() and summarize()\n18.6.11 rename()\n\n\n18.7 Join/Combine Data Frames\n18.8 Statistics\n18.9 Generic Functions\n18.10 References\n\n\n19 NLTK\n19.1 Installation\n19.2 Corpora Data\n19.3 WordNet\n19.3.1 A Dictionary Resource\n19.3.2 Lexical Relations\n19.3.3 Semantic Similarity Computation\n\n\n19.4 Discovering Word Collocations\n19.5 Tokenization\n19.6 Chinese Word Segmentation\n19.7 Afterwords\n\n\n20 Web Scraping\n20.1 webbrowswer module\n20.2 requests Module\n20.3 bs4 Module (Beautiful Soup)\n20.4 Reference\n\n\n21 Transcribing\n21.1 Working with Audio Files\n21.2 Working with Microphone Inputs\n21.3 References\n\n\nAppendix\nA The Shell\nA.1 Why do you need to know shell commands?\nA.2 Shebang Line\nA.3 Basic Shell Commands\nA.4 Text-Analytic Related Commands\nA.5 References\n\n\nB Reproducible Report\nB.1 R Markdown\nB.2 Open Science\nB.3 Installing R Markdown\nB.4 R Markdown Components\nB.5 Tips\nB.6 References\n\n\n\nReferences\n\n\nAlvin Chen\n\nPublished with bookdown\n\n\n\nAA\nSerifSans\nWhiteSepiaNight\n\nENC2055: Introduction to Programming Languages for Linguistic Analysis\nThis page was last updated: 12/12/2024 23:44:32\nChapter 9 String Manipulation\n\nIn the field of data analysis, a significant portion of the data usually consists of text or strings. As such, it is often necessary to use various techniques for string manipulations such as finding, replacing, removing, combining, or splitting strings.\nA comprehensive understanding of string processing is essential for a competent data scientist. One of the most important tools for effective string manipulation is regular expressions, which can be used to match, extract, and manipulate specific patterns within strings.\nIn this chapter, we will cover several frequently-used techniques for string manipulation, with a particular focus on regular expressions. We will use the stringr package to illustrate the various functions and methods for string manipulation. The stringr package is part of the tidyverse framework, which provides a suite of packages for data wrangling and analysis in R.\n```\nlibrary(tidyverse)\nlibrary(stringr) # loaded when loading tidyverse\n```\n9.1 What is Regular Expression?\n\nIn text processing, it is common to perform “find-and-replace” operations in documents. This is a routine task in programs like MS-Word or MS-Excel, where specific processing is performed on sets of strings by locating and modifying them.\nRegular expressions are a powerful tool in this domain, allowing us to create a schematic textual pattern that can be used to match other strings that fit this pattern. The ability to use one pattern for multiple matches is the beauty of regular expressions.\nRegular expressions have several advantages, including:\n\nEfficient pattern matching\nChecking the format of email addresses, phone numbers, etc.\nIdentifying reduplicated strings\nControlling date format\n\n\nInformation extraction and text mining\nExtracting texts according to a specific format\nIdentifying proper names, email addresses, phone numbers, etc.\n\n\n\nThe one-to-many mapping nature of regular expressions enables us to retrieve strings with similar properties in a simpler and more coherent way.\nAnother advantage of regular expressions is that with the knowledge of regular expression and coding capability, you can perform pattern matching tasks on any machine-readable dataset (i.e., corpora) without being limited to the platform created by the corpus provider.\nWithout regular expression knowledge, every time we need to retrieve patterns from a corpus, we must learn the system-specific syntax for corpus query, which may limit us to what the platform is capable of.\nHowever, it is important to note that access to the full-text corpus data is required, and a licensed use must be obtained beforehand. That’s another issue !)\n\n9.2 String Basics\nBefore we introduce regular expressions, let’s look at some of the basic string-related functions. Functions from the library stringr often start with str_*(). There are three basic functions:\n\nstr_length(): get the length of the string (i.e., number of characters)\n\nword_string <- c("the", "word", "string")\nword_string %>%\n  str_length\n[1] 3 4 6\n\nstr_c(): combine strings into a longer one\n\nstr_c("the","word","string")\n[1] "thewordstring"\nstr_c("the","word","string",sep = "_")\n[1] "the_word_string"\nFrom the above output, can you tell what is the default value for the argument str_c(..., sep = ...)?\nPlease note that the following code generates a different result from the above. Can you tell the differences?\nHow can you create exactly the same results by using str_c(word_string,...)? Please check ?str_c.\nstr_c(word_string, sep = "_")\n[1] "the"    "word"   "string"\nCan you predict the outputs of the following code?\n```\nx <- letters[1:10]\ny <- c("suffix1", "suffix2")\nz <- LETTERS[1:10]\nstr_c(x, y)\nstr_c(x, z)\nstr_c(x, z, sep = "_")\nstr_c(x, collapse="")\nstr_c(x, collapse=" ")\nstr_c(x, z, collapse="")\nstr_c(x, z, collapse=" ")\nstr_c(x, z, sep = "_", collapse = " ")\nstr_c(x, z, x, sep="_")\n```\n\n\nWhen we have several vectors of the same lengths in the str_c(), we can use the argument str_c(..., sep = ...) to combine each pair of the corresponding elements in the vectors with the sep as the separator.\n\nx <- letters[1:10]\ny <- c("suffix1", "suffix2")\nz <- LETTERS[1:10]\nstr_c(x, z, sep = "_")\n[1] "a_A" "b_B" "c_C" "d_D" "e_E" "f_F" "g_G" "h_H" "i_I" "j_J"\nstr_c(x, z , sep = "/")\n[1] "a/A" "b/B" "c/C" "d/D" "e/E" "f/F" "g/G" "h/H" "i/I" "j/J"\n\nWhen we have only one vector (but it is a multiple-element character vector) in the str_c(), we can use the argument str_c(..., collpase = ...) to collapse the vector into a long single string with the collapse as the delimiter of the original vector elements. The default value is collapse = NULL (i.e., str_c() by default does not collapse the vector.)\n\nstr_c(x, collapse = "")\n[1] "abcdefghij"\nstr_c(x, collapse = " ")\n[1] "a b c d e f g h i j"\nstr_c(x, collapse = "_")\n[1] "a_b_c_d_e_f_g_h_i_j"\n\nWhen we have one or more vectors that are of the same lengths in the str_c(), we can use the argument str_c(..., sep = ...., collpase = ...) to collapse the vectors into a long single string, with the sep as the separator for each pair of elements in the vectors, and the collapse as the delimiter of the paired elements.\n\nstr_c(x, z, sep="_", collapse=" ")\n[1] "a_A b_B c_C d_D e_E f_F g_G h_H i_I j_J"\nstr_c(x, z, sep="-", collapse="/")\n[1] "a-A/b-B/c-C/d-D/e-E/f-F/g-G/h-H/i-I/j-J"\n\n\nstr_sub(): extract part of the string by positions\n\nstr_sub(string = "international", \n        start = 1,\n        end = 5)\n[1] "inter"\nPlease note that in R most of the functions are vectorized (i.e., if you apply a vectorized function to a vector, it will perform the same operation on each element of the vector and return a new vector with the results.)\n```\ncreate a vector\nset.seed(12)\nrandom_fruits <- sample(fruit, 5) ## fruit is a default vector\nrandom_fruits\n```\n[1] "purple mangosteen" "loquat"            "rambutan"         \n[4] "tangerine"         "grape"\n```\nstr_sub() all strings in the vector\nstr_sub(random_fruits, start = 1, end = 3)\n```\n[1] "pur" "loq" "ram" "tan" "gra"\n9.3 Regular Expression Grammar\nNow let’s look at the grammar of regular expressions in more detail. In this section, we will discuss the standard Perl-compatible regular expression syntax. This is by now the most widely used version of regular expressions in most programming languages.\nTo start with, in stringr, there is a very useful function, str_view(STRING, PATTERN), which can show us the match of the pattern in the string in a visually intuitive way.\nLet’s look at a simple regular expression pattern: ".a". It is a pattern that matches any two-character sequence where the first character can be any character (represented by the period .) and the second character must be “a”.\n```\nx <- c("apple", "banana", "pear")\nShow only strings with the match\nstr_view(string = x, pattern = ".a")\n```\n[2] │ <ba><na><na>\n[3] │ p<ea>r\n```\nShow all strings of the input x\nstr_view_all(string = x, pattern = ".a")\n```\n[1] │ apple\n[2] │ <ba><na><na>\n[3] │ p<ea>r\nIn the above example, the matches of the (regular) pattern are surrounded by < > in the output of str_view(). Also, we know that the pattern (i.e., .a) exists only in the second and third strings of x.\nstr_view() has two useful functions:\n\nto see how a pattern matches\nto print the ambiguous zero-width characters in the string.\n\nstr1  <- "hello world!"\nstr2  <- "hello\u3000world!"\nstr_view(str1)\n[1] │ hello world!\nstr_view(str2)\n[1] │ hello{\\u3000}world!\nWith str_view(), we can check whether the string contains any unusual whitespace (i.e., all whitespaces apart from " " and "\\n"). In the above example, the "\\u3000" is a full-width whitespace, often used in Chinese text.\nYou can also use RegExplain addin to test your regular expressions. RegExplain is a very useful tool for the use of regular expressions–RegExplain, which is an RStudio addin. It allows you to:\n\ninteractively build your regexp and check the output of common string matching functions\nuse the included resources to learn regular expressions\nconsult the interactive help pages\n\nThis is very useful because you can prepare the regular expressions and use them in the code chunk after you have made sure that they work properly in the RegExplain.\nYou can install the addin using remotes:\n```\nPlease install remotes if you haven\'t\ninstall.packages("remotes")\nremotes::install_github("gadenbuie/regexplain")\n```\n\nFor basic syntax of regular expressions, I will use this str_view() to show you how the regular pattern works in string-matching.\n9.3.1 Common String Manipulation Functions\nHere are quick definitions for the common string manipulation functions from the stringr package in R:\n\nstr_detect(): Detects if a pattern exists in a string. Returns a logical vector indicating if the pattern is found in each string.\nstr_match(): Extracts the first match of a regular expression pattern from each string. Returns a matrix with the matched strings and captured groups.\nstr_match_all(): Extracts all matches of a regular expression pattern from each string. Returns a list of matrices of matches.\nstr_extract(): Extracts the first occurrence of a pattern from each string. Returns a character vector.\nstr_extract_all(): Extracts all occurrences of a pattern from each string. Returns a list of character vectors.\nstr_subset(): Returns the elements of a character vector that contain the pattern.\nstr_replace(): Replaces the first occurrence of a pattern in a string with a specified replacement.\nstr_replace_all(): Replaces all occurrences of a pattern in a string with a specified replacement.\n\nWe will talk about these functions in a more detailed way in Section 9.4.\nAs a quick example, depending on your purpose, we can retrieve different information from each element of x based on the regular expression .a:\nx <- c("apple", "banana", "pear")\nstr_detect(string = x, pattern = ".a") ## Boolean\n[1] FALSE  TRUE  TRUE\nstr_match(string = x, pattern = "(.)a") ## Exact matches ( + group)\n[,1] [,2]\n[1,] NA   NA  \n[2,] "ba" "b" \n[3,] "ea" "e"\nstr_match_all(string = x, pattern = "(.)a") ## Exact matches all ( + groups)\n```\n[[1]]\n     [,1] [,2]\n[[2]]\n     [,1] [,2]\n[1,] "ba" "b" \n[2,] "na" "n" \n[3,] "na" "n" \n[[3]]\n     [,1] [,2]\n[1,] "ea" "e" \n```\nstr_extract(string = x, pattern = "(.a)") ## Exact matches\n[1] NA   "ba" "ea"\nstr_extract_all(string = x, pattern = "(.a)") ## Exact matches all\n```\n[[1]]\ncharacter(0)\n[[2]]\n[1] "ba" "na" "na"\n[[3]]\n[1] "ea"\n```\nstr_subset(string = x, pattern = ".a") ## Input strings with matches\n[1] "banana" "pear"\nstr_replace(string = x, pattern = ".a", replacement = "_") ## Input strings with the first match replaced\n[1] "apple" "_nana" "p_r"\nstr_replace_all(string = x, pattern = ".a", replacement = "_") ## Input strings with all matches replaced\n[1] "apple" "___"   "p_r"\n9.3.2 Metacharacters\nTo implement the idea of one-to-many mapping, RegEx defines several metacharacters, which are of special use in regular expressions. Their meanings are NOT the same as their literal counterparts.\n\nIn RegEx, . is a special character, referring to any character:\nx <- c("apple", "banana", "pear")\nstr_view(string = x, pattern = ".a.")\n[2] │ <ban>ana\n[3] │ p<ear>\nThe above regular expression .a. is a pattern that matches any three-character sequence where:\n\nthe first character can be any character (i.e., .);\nthe second character must be a;\nthe third character can by any character (i.e., .).\n\n\nWhat if you need to match the period . symbol literally in your string? In this case, you would need to use an escape character \\.\nx <- c("apple", "banana","pear", "orange. And")\nstr_view(string = x, pattern = ".")\n[1] │ <a><p><p><l><e>\n[2] │ <b><a><n><a><n><a>\n[3] │ <p><e><a><r>\n[4] │ <o><r><a><n><g><e><.>< ><A><n><d>\nIn regular expression syntax, the backslash \\ is used to indicate that the following character should be treated literally, rather than as a metacharacter.\nHowever, in R, the backslash itself is also a metacharacter. Therefore, to use the backslash as an escape character, you need to double it up, like \\\\. The first backslash tells the R engine that the second backslash should be taken literally, and the second backslash tells the regular expression engine that the following character should be taken literally as a period.\nstr_view_all(string = x, pattern = "\\\\.")\n[1] │ apple\n[2] │ banana\n[3] │ pear\n[4] │ orange<.> And\nIn the above example, the . metacharacter matches any character except for a newline character, so it will match all characters in the string. However, in the second example, the \\\\. regular expression matches only the period character, because the backslash is used to escape the period and tell the regular expression engine to treat it litera... [truncated]\n\nSource "Mastering Regular Expressions in Natural Language Processing (NLP ...:\n===\nURL: https://medium.com/@charmilagiri6/mastering-regular-expressions-in-natural-language-processing-nlp-with-python-2bbbfbac33e9\n===\nMost relevant content from source: Regular expressions are indispensable tools for text manipulation in NLP tasks. By mastering regex in Python, you gain the ability to tokenize text, perform named entity recognition, and clean\n===\nFull source content limited to 5000 tokens: “Mastering Regular Expressions in Natural Language Processing (NLP) with Python” | by Charmilagiri | Medium\nOpen in app\nSign up\nSign in\n\nWrite\n\nSign up\nSign in\n\n“Mastering Regular Expressions in Natural Language Processing (NLP) with Python”\n\nCharmilagiri\n·Follow\n3 min read\n·\nAug 28, 2023\n\n--\n\nListen\nShare\n\nIntroduction\nNatural Language Processing (NLP) is a fascinating field that focuses on the interaction between computers and human languages. NLP tasks often involve processing and analysing large volumes of text data. Regular expressions (regex) play a crucial role in NLP by enabling us to search, extract, and manipulate text efficiently. In this blog, we’ll explore the application of regex in NLP, with practical code examples using Python.\nUnderstanding Regular Expressions\nBefore diving into NLP-specific use cases, let’s briefly review the fundamentals of regular expressions in Python.\n\nOutput: [walking, talking, coding, interesting]\nIn the example above, we use the `re.findall()` function to find all words ending in “ing” within the given text.\nthe pattern r’\\b\\w+ing\\b’ can be understood as follows:\n\n\\b asserts the start of a word.\n\\w+ matches one or more word characters, which is essentially the root word.\ning matches the string "ing" literally.\n\\b asserts the end of the word.\n\nNLP Applications with Regex\n1. Tokenization\nTokenization is the process of breaking text into individual words or tokens. Regex can be used to split text into tokens based on spaces or other delimiters.\n\nOutput: [‘Walking,’, ‘talking,’, ‘and’, ‘coding’, ‘are’, ‘interesting’, ‘activities.’]\nthe pattern r’\\s+’ matches sequences of white space characters in a string, effectively tokenizing the text on white space boundaries\n2. Named Entity Recognition (NER)\nNER is the task of identifying and classifying named entities (e.g., names of people, places, organizations) in text. Regex can be used to search for specific patterns indicative of named entities.\n\nOutput: [‘Walking’]\nthe pattern r’[A-Z][a-z]+’ matches words that start with an uppercase letter followed by one or more lowercase letters. This is often used to identify words that might be proper nouns like names or titles.\n3. Removing Special Characters and Punctuation\nCleaning text data often involves removing special characters and punctuation. Regex patterns can help with this task.\n\nOutput: Walking talking and coding are interesting activities\nthe pattern r’[^\\w\\s]’ matches any character that is not a letter, digit, or underscore (a non-word character) and is also not a white space character. Essentially, it matches punctuation and special characters in text.\nConclusion\nRegular expressions are indispensable tools for text manipulation in NLP tasks. By mastering regex in Python, you gain the ability to tokenize text, perform named entity recognition, and clean text data effectively. These skills are invaluable when working with large volumes of textual data in NLP projects. While regex can be powerful, it’s essential to use it judiciously and in combination with other NLP techniques for robust and accurate results in natural language processing.\n\nSign up to discover human stories that deepen your understanding of the world.\nFree\nDistraction-free reading. No ads.\nOrganize your knowledge with lists and highlights.\nTell your story. Find your audience.\nSign up for free\nMembership\nRead member-only stories\nSupport writers you read most\nEarn money for your writing\nListen to audio narrations\nRead offline with the Medium app\nTry for $5/month\n\n--\n\n--\n\n\n\nFollow\nWritten by Charmilagiri -----------------------\n6 Followers\n·4 Following\nFollow\nNo responses yet\n\nWhat are your thoughts?\nAlso publish to my profile\nRespond\nRespond\nHelp\nStatus\nAbout\nCareers\nPress\nBlog\nPrivacy\nTerms\nText to speech\nTeams
        """

        return source_str